<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ASD</title>
    <description>Network Development: JavaScript, TypeScript, Node.js, Python, Golang, C.
</description>
    <link>http://asduser.github.io/</link>
    <atom:link href="http://asduser.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 06 Nov 2016 23:58:22 +0200</pubDate>
    <lastBuildDate>Sun, 06 Nov 2016 23:58:22 +0200</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>XMPP Messaging - first experience</title>
        <description>&lt;p&gt;XMPP - Extensible Messaging and Presence Protocol, which streams different XML stanzas over a network. It was developed in 1998 and official shared in 1999. A lot of helpful services, technologies and tools were designed by XMPP standard and they exist today.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;I’ve started use XMPP 2 weeks ago and I absolutely had no idea how it works before. So, my first impression - it is a huge and tremendous technology, which truly can solve a wide range of messaging issues.&lt;/p&gt;

&lt;p&gt;To start using XMPP over HTTP you should communicate to &lt;a href=&quot;https://xmpp.org/about/technology-overview.html#bosh&quot;&gt;BOSH&lt;/a&gt; - a specific over synchronous HTPP stream.&lt;/p&gt;

&lt;p&gt;Before we start talking about practical experience I’d like to share with you useful links from official sites:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/XMPP#Strengths&quot;&gt;XMPP strengths&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/XMPP#Weaknesses&quot;&gt;XMPP weaknesses&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xmpp.org/about/faq.html&quot;&gt;XMPP official FAQ&lt;/a&gt; .&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://xiffian.sourceforge.net/Screenshots/Screenchat.jpg&quot; alt=&quot;xmpp sample chat room&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-the-environment&quot;&gt;Setting the environment&lt;/h2&gt;

&lt;p&gt;To start with you need to install and configure a server-side environment in according to official documentation. See list of public &amp;amp; available servers - &lt;a href=&quot;https://xmpp.org/software/servers.html&quot;&gt;click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next step - necessary to determine the client technology to work with XMPP protocol. &lt;a href=&quot;https://xmpp.org/software/clients.html&quot;&gt;See here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may create a any number of chatrooms, use a private\public conference, broadcast a specific events, accept notifications, transfer images, send smiles etc. It is only a small list of actual XMPP posibilities with whom I’ve dealt.&lt;/p&gt;

&lt;p&gt;I was pleasantly surprised acknowledging an ability to work with offline messaging. You may specify a delay counter when your stanza should be delivered to your collocutor.&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;p&gt;The first thing is a format of XMPP messaging - XML stanzas. You may share you presence, build a different server requests but always should use XML elements in a strict respected format.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Assume, client sends request to server:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;iq&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;from=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;hag66@shakespeare.lit/pda&#39;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;h7ns81g&#39;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;to=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;shakespeare.lit&#39;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;get&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;query&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;http://jabber.org/protocol/disco#items&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/iq&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And immediately will be informed by appropriate response:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;iq&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;from=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;shakespeare.lit&#39;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;h7ns81g&#39;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;to=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;hag66@shakespeare.lit/pda&#39;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;result&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;query&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;http://jabber.org/protocol/disco#items&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;jid=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;chat.shakespeare.lit&#39;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Chatroom Service&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/query&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/iq&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are a lot of libraries to build a proper messages - you should just specify a list of arguments &amp;amp; values.&lt;/p&gt;

&lt;p&gt;One of the most popular JS libraries to work with XMPP are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/strophe/strophejs&quot;&gt;Strophe.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/legastero/stanza.io&quot;&gt;Stanza.io&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I guess, it is cool, cause any developer may be sure that another one uses the same format to build requests. This approach prevents you to make prevalent mistakes or make them less and significantly save your time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.armorgames.com/wp-content/uploads/2015/09/chat_room_tab2.png&quot; alt=&quot;xmpp sample chat room&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;connection&quot;&gt;Connection&lt;/h3&gt;

&lt;p&gt;Throughout all session the client will have a list of event emitters, where each of them depends on some appropriate external event.&lt;/p&gt;

&lt;p&gt;For example, you connected to the chat-room and if there is some participant, he would be informed by special information stanza.&lt;/p&gt;

&lt;p&gt;When you leave room, write a message, join group or send invite - all this actions raise proper broadcasts. You may subscribe to person, configure chat-rooms, manage your contact list and more another cool features.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;XMPP - is a cool technology for messaging. If you need to use web-chat and be sure that it will work on cross-platform devices, the choise is clear. Of course, it not only one suitable library to broadcast messages over the browser and any person may use whatever he wants.&lt;/p&gt;

&lt;p&gt;In the next time I’ll try to share with you some cases of using XMPP.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Nov 2016 08:30:00 +0200</pubDate>
        <link>http://asduser.github.io/technologies/xmpp-messaging</link>
        <guid isPermaLink="true">http://asduser.github.io/technologies/xmpp-messaging</guid>
        
        
        <category>xmpp,</category>
        
        <category>message,</category>
        
        <category>chat,</category>
        
        <category>javascript,</category>
        
        <category>strophe.js,</category>
        
        <category>stanza</category>
        
      </item>
    
      <item>
        <title>Robomongo tool for MongoDB</title>
        <description>&lt;p&gt;Not so long ago I’ve started use a special management tool for MongoDB - Robomongo. The main features which were interesting for me: simplicity, rapidity and flexibility. Robomongo truly can help you to solve your needs in database refactoring without a lot of unnecessary manual scenarios.&lt;/p&gt;

&lt;h2 id=&quot;few-words-about&quot;&gt;Few words about&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://bicortex.com/bicortex/wp-content/post_content//2014/01/MongoDB-part4-robomongo-gui.png&quot; alt=&quot;project architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the requirements for correct Robomongo work is a “mongod” primary &lt;a href=&quot;https://docs.mongodb.com/manual/reference/program/mongod/&quot;&gt;daemon process&lt;/a&gt;. If you have any experience with MongoDB, you probably heard about that and used it.&lt;/p&gt;

&lt;h2 id=&quot;requests&quot;&gt;Requests&lt;/h2&gt;

&lt;p&gt;For example, you need to get all existing users in some table. You may use a special request in shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;db.users.find();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or just click on the table in Robomongo and select “&lt;em&gt;View documents&lt;/em&gt;”. It’s easy!&lt;/p&gt;

&lt;p&gt;Actually I’m not a fan of ui tools and I’d like to use a native shell, cause it prevents you from some inexplicable behaviour. You just do only what you want, no more.&lt;/p&gt;

&lt;p&gt;But Robomongo helps you on the active development stage, when you often modify or change your database scheme, data, documents structure. Find the data, save or modify scheme, load an existing scheme, replace fields etc.&lt;/p&gt;

&lt;p&gt;It’s a not fully free product, but you can use community version which costs 0$ per month. In this case you could use main Robomongo features, try it in your projects and decide regarding further uses if needed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2.alternativeto.net/dist/s/69543700-5346-e311-b64a-002590a05f5f_2_full.png?format=jpg&amp;amp;width=1200&amp;amp;height=1200&amp;amp;mode=crop&amp;amp;upscale=false&quot; alt=&quot;project architecture&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;impressions&quot;&gt;Impressions&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Great tool to work with MongoDB. This is especially noticeable when you work with Express.js or other similar framework and design an API to work with database like MongoDB.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Many requests, a lot of changes and modifications using Robomongo should prevent you from a mechanical issues or misprints.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cross-platform software.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Using tabs, which allows to compare two or more results with each other.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Additional snippets, autocomplete.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Good luck, have a fun!&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Oct 2016 09:30:00 +0300</pubDate>
        <link>http://asduser.github.io/tools/robomongo</link>
        <guid isPermaLink="true">http://asduser.github.io/tools/robomongo</guid>
        
        
        <category>node.js,</category>
        
        <category>mongodb,</category>
        
        <category>tool</category>
        
      </item>
    
      <item>
        <title>Next item\previous item in array</title>
        <description>&lt;p&gt;Hi, everybody! Today I’d like to tell you about some often used features in programming - find next\previous item in array. It happens when you need to operate with tree-node elements or just switch on to the specific item in collection.&lt;/p&gt;

&lt;p&gt;The code below assumes that each item should has two attributes: unique id and value field. Due to boolean comparison operator we can get an appropriate element.&lt;/p&gt;

&lt;h3 id=&quot;next-item-algorithm&quot;&gt;Next item algorithm.&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Check if current index in iteration is not equal to collection.length, otherwise - specify index to 0.&lt;/li&gt;
  &lt;li&gt;Increase current index by 1.&lt;/li&gt;
  &lt;li&gt;Check if current element has value. If not - do 2nd step, if yes - return it and break loop.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;previous-item-algorithm&quot;&gt;Previous item algorithm.&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Check if current index in iteration is not equal to zero, otherwise - specify index to collection.length.&lt;/li&gt;
  &lt;li&gt;Decrease current index by 1.&lt;/li&gt;
  &lt;li&gt;Check if current element has value. If not - do 2nd step, if yes - return it and break loop.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;typescript-implementation&quot;&gt;Typescript implementation&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;
// Declare class.
class Item {
    constructor(public id: number, public val: number = null){}
}

// Fill elements collection.
// It will be equal to: [{id:0, val: null}, {id:1, val: null}, {id:2, val: 32}, {id:3, val: null}, {id:4, val: 53}];
const arr: Item[] = [new Item(0), new Item(1), new Item(2, 32), new Item(3), new Item(4, 53)];

// Special helper if no one element has value.
const isAllNull = (arr: Array&amp;lt;Item&amp;gt;) =&amp;gt; {
    return arr.every((el) =&amp;gt; !el.val);
};

// Declare function to find next item.
const nextIndex = (index: number, arr: Array&amp;lt;Item&amp;gt;): any =&amp;gt; {
    if (isAllNull(arr)) return {}; 
    let item = null;
    const minI = 0;
    let i = index;
    while (i &amp;lt; arr.length) {
        i++;
        if (i == arr.length) { i = minI; }
        if (arr[i].val) { item = arr[i]; break;}
    }
    return item;
};

// Declare function to find previous item.
const prevIndex = (index: number, arr: Array&amp;lt;Item&amp;gt;): any =&amp;gt; {
    if (isAllNull(arr)) return {};
    let item = null;
    const maxI = arr.length;
    let i = index;
    while (i &amp;gt; 0) {
        i--;
        if (arr[i].val) { item = arr[i]; break;}
        if (i == 0) { i = maxI; }
    }
    return item;
};

console.log( nextIndex(2, arr) ); // {id:4, val: 53}
console.log( nextIndex(4, arr) ); // {id:2, val: 32}
console.log( prevIndex(4, arr) ); // {id:2, val: 32}

// Create another collection where all items have &#39;null&#39; value.
const arr1: Item[] = [new Item(0), new Item(1)];
console.log( prevIndex(1, arr1) ); // {}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;python-implementation&quot;&gt;Python implementation&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isAllNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;val&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nextIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isAllNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;minI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minI&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;val&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prevIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isAllNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maxI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxI&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;val&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;val&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;val&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;val&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;val&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;val&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prevIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;arr1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;val&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;val&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you see, we have a special checking if all elements in collection will have null\false value. In that case, method should just return an empty object or smth that you want.&lt;/p&gt;

&lt;p&gt;To be continued…&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Sep 2016 15:00:00 +0300</pubDate>
        <link>http://asduser.github.io/programming/nextitem-previtem-in-array</link>
        <guid isPermaLink="true">http://asduser.github.io/programming/nextitem-previtem-in-array</guid>
        
        
        <category>typescript,</category>
        
        <category>python,</category>
        
        <category>es6</category>
        
      </item>
    
      <item>
        <title>Typescript - Web API error handler</title>
        <description>&lt;p&gt;Flexible module to manage an arising Web API error messages and notify about that via special handler. It is a useful thing on development mode, when you often need a supplemental descrption message.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/asduser/typescript-practice/tree/master/web-api-error-handler&quot;&gt;Download an example project from github.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/asduser/typescript-practice/tree/master/web-api-error-handler&quot; class=&quot;github-button&quot;&gt;Open repository&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;declare-a-main-scrope&quot;&gt;Declare a main scrope&lt;/h2&gt;

&lt;p&gt;To stat with, create an individual space for module to avoid any possible issues in the future. In this case, it will be working using a &lt;em&gt;namespace&lt;/em&gt; key.&lt;/p&gt;

&lt;p&gt;Moreover, we’re going to work with references injections, so a main file has the following style:&lt;/p&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;Core.ts&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;
/// &amp;lt;reference path=&quot;Enum/State.ts&quot;/&amp;gt;
/// &amp;lt;reference path=&quot;Enum/Message.ts&quot;/&amp;gt;
/// &amp;lt;reference path=&quot;Interface/ILogger.ts&quot;/&amp;gt;
/// &amp;lt;reference path=&quot;Interface/IDispatcher.ts&quot;/&amp;gt;
/// &amp;lt;reference path=&quot;Dispatcher.ts&quot;/&amp;gt;

namespace ApiErrorHandler {}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you see, nothing special, just declaring the main project files there. Nevertheless, there was declared &lt;strong&gt;namespace ApiErrorHandler&lt;/strong&gt; to simplify project navigation.&lt;/p&gt;

&lt;p&gt;You open this file, then find the line with announced namespace line and thereafter you may be aware of why it was created and which items it contains.&lt;/p&gt;

&lt;h2 id=&quot;project-structure&quot;&gt;Project structure&lt;/h2&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;Project structure&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/post/ts-api-error-handler-1-project.png&quot; alt=&quot;project architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s talk about each directory separately.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;js&lt;/strong&gt; - contains concatenated output.js file.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ts\ApiErrorHandler&lt;/strong&gt; - our future module located there.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ts\ApiErrorHandler\Enum&lt;/strong&gt; - a different TypeScript enum files.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ts\ApiErrorHandler\Interface&lt;/strong&gt; - interfaces to work with classes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ts\ApiErrorHandler\Core.ts&lt;/strong&gt; - includes all *.ts references.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ts\ApiErrorHandler\Dispatcher.ts&lt;/strong&gt; - the main file, which contains a diffrerent logical blocks.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But we have another one - &lt;strong&gt;ts\main.ts&lt;/strong&gt;. It’s independent from &lt;em&gt;ApiErrorHandler&lt;/em&gt; file where we can create a diffrerent instances, entities, change our module configuration etc.&lt;/p&gt;

&lt;p&gt;To compile a new &lt;em&gt;output.js&lt;/em&gt; file use command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tsc --out js/output.js ts/main.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or with *.map file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tsc --sourcemap --out js/output.js ts/main.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;interfaces&quot;&gt;Interfaces&lt;/h2&gt;

&lt;p&gt;We have 2 interfaces in our app:&lt;/p&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;IDispatcher.ts&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;/// &amp;lt;reference path=&quot;../Core.ts&quot;/&amp;gt;

namespace ApiErrorHandler {

  export interface IDispatcher {
    isSuccess(response: any, headers?: any, config?: any): boolean;
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;ILogger.ts&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;/// &amp;lt;reference path=&quot;../Core.ts&quot;/&amp;gt;

namespace ApiErrorHandler {

  // Inherited class may contain either on of console methods or custom :void handler.
  export interface ILogger {
    Show(Entity: any): void;
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first one is responsible for ApiErrorHandler behaviour, as to the another one - it contains action list for Logger.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Logger&lt;/em&gt; is the common feature to work with messages, particularly with Web Api errors. So, you may specify any handler there (console, alert or smth else) and use in development mode.&lt;/p&gt;

&lt;h2 id=&quot;enums&quot;&gt;Enums&lt;/h2&gt;

&lt;p&gt;In order to take out the common constant variables into separate files, we’ll use TypeScript &lt;strong&gt;enum&lt;/strong&gt;.&lt;/p&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;Status.ts&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;/// &amp;lt;reference path=&quot;../Core.ts&quot;/&amp;gt;

namespace ApiErrorHandler {

  export enum State {
    BadRequest = 400,
    UnAuthorized = 401,
    NotFound = 404,
    ServerError = 500
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;Message.ts&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;/// &amp;lt;reference path=&quot;../Core.ts&quot;/&amp;gt;

namespace ApiErrorHandler {

  export const Message = {
    BadRequest: &quot;Request has a lexical error in URI.&quot;,
    UnAuthorized: &quot;Authorization token has been expired.&quot;,
    NotFound: &quot;An attempt to send a request to non-exsting route.&quot;,
    ServerError: &quot;Unexpected server error - 500.&quot;,
    ConnectionError: &quot;Cannot establish connection with server.&quot;
  };

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we may use any status as a constant variable and if we need to change value - just open &lt;strong&gt;Status.ts&lt;/strong&gt; file and then modify an appropriate field.&lt;/p&gt;

&lt;h2 id=&quot;dispatcher-class&quot;&gt;“Dispatcher” class&lt;/h2&gt;

&lt;p&gt;We come to the main point - &lt;strong&gt;Dispatcher.ts&lt;/strong&gt; file, where besides IDispatcher interface implementation declared the next classes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;ErrorHandlerConfig&lt;/strong&gt; - to create a new ErrorHandler configuration.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DefaultLogger&lt;/strong&gt; - class which exposes the ILogger functionality and define a default behaviour for it.&lt;/li&gt;
&lt;/ol&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;class ErrorHandlerConfig in Dispatcher.ts&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// Config to manage handler behaviour.
  class ErrorHandlerConfig {
    private Logger: ILogger = new DefaultLogger();
    public showErrors: boolean = true;

    public LogMessage = (Entity: any): void =&amp;gt; {
      this.Logger.Show(Entity);
    }

    public SetLogger(logger: ILogger): void {
      this.Logger = logger;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;class DefaultLogger in Dispatcher.ts&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;// Default logger to handle error messages.
  class DefaultLogger implements ILogger {
    public Show(Entity: any): void {
      console.error(Entity);
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;server-response-validation&quot;&gt;Server response validation&lt;/h2&gt;

&lt;p&gt;Supposing we sent some request to server and have an appropriate response (usually JSON-format). Of course, that response contains the common fields “Status”, “Message” and “Data”. And then, inside appliaction we have to call suitable scenario depending on received status code.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;status: 200&lt;/em&gt; - all is ok&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;status: 400, 401, 404, 500&lt;/em&gt; etc. - avoid code execution and throw a specific message with error description.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Real application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;$http.get(someUrl).success((response, status, headers, config) =&amp;gt; {
  if( dispatcher.isSuccess(response) ) {
    // actions when succeeded
  }
  // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may set your own any number of rules in Dispatcher class for each specific situation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;if (response.Status === State.ServerError) {
  this.Config.showErrors &amp;amp;&amp;amp; this.Config.LogMessage(`Status: ${Message.ServerError}`);
  return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above we’ll show default message from our “&lt;em&gt;Message.ts&lt;/em&gt;” enum if parameter showErrors is enabled. Thereafter, method returns “false”, which prevents any probable code issues in future.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;/// &amp;lt;reference path=&quot;ApiErrorHandler/Core.ts&quot; /&amp;gt;

// Use error handler to check input data.
let dispatcher = new ApiErrorHandler.Dispatcher();

// Create a special class for mock.
class MockResponse {
  constructor(public Status?: number, public Message?: string) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;We initialize a new Dispatcher instance.&lt;/li&gt;
  &lt;li&gt;Declared a special MockResponse class which copies a real server response behavior.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;class AlertLogger implements ApiErrorHandler.ILogger {
  Show = (entity: any): void =&amp;gt; {
    alert(entity);
  }
}

// Redefine standart message logger to custom.
dispatcher.Config.SetLogger(new Logger());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we created a special class to handle error messages. In this case all messages will be displayed throughout default alert window.&lt;/p&gt;

&lt;p&gt;Now let’s create a few data mocks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;const serverError = new MockResponse(500, &quot;Timeout expired. Database cannot run a procedure.&quot;);

// CONNETCION ERROR behavior
dispatcher.isSuccess();
// SERVER ERROR behavior
dispatcher.isSuccess(serverError);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you will see in your alert-box an appropriate messages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/ts-api-error-handler-2-alert1.png&quot; alt=&quot;project architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/ts-api-error-handler-2-alert2.png&quot; alt=&quot;project architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, instead a default alert method you may specify any other handler and be sure it will be work the same.&lt;/p&gt;

&lt;h2 id=&quot;download-github&quot;&gt;Download (github)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/asduser/typescript-practice/tree/master/web-api-error-handler&quot;&gt;Download an example project from github.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/asduser/typescript-practice/tree/master/web-api-error-handler&quot; class=&quot;github-button&quot;&gt;Open repository&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jul 2016 15:00:00 +0300</pubDate>
        <link>http://asduser.github.io/typescript/web-api-error-handler</link>
        <guid isPermaLink="true">http://asduser.github.io/typescript/web-api-error-handler</guid>
        
        
        <category>typescript,</category>
        
        <category>utils</category>
        
      </item>
    
      <item>
        <title>A way to manage TypeScript references</title>
        <description>&lt;p&gt;Step by step TypeScript retrieves a new useful features such a generic types, decorators, namespaces, abstraction levels e.c. But one of the truly cool things, which may significantly improve code readability is modules system.&lt;/p&gt;

&lt;p&gt;If you have an experience with AMD (&lt;em&gt;Asynchronous module definition, AMD&lt;/em&gt;), undoubtedly you’ve worked with big JavaScript application systems. Here is the simple example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

     &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now it does not matter, what exactly code above means. Just try to be aware of that feature in JavaScript before it was implemented into TypeScript.&lt;/p&gt;

&lt;h3 id=&quot;typescript--modules&quot;&gt;TypeScript &amp;amp; modules&lt;/h3&gt;

&lt;p&gt;So, modules can help you manage big applications, separate a specific block of codes into independent functional entities and decrease time for debugging. You may declare module into several *.ts files, but all of them will contain a common infromation about concrete feature.&lt;/p&gt;

&lt;p&gt;To declare module use:&lt;/p&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;NotificationManager.ts&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;module NotificationManager {
 // ... 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make some content visible and avaliable outside (in specified module), use a following operator:&lt;/p&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;NotificationManager.ts&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;export interface INotificationSender {
 // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in another *.ts file just refer to it like in the same file:&lt;/p&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;Another.ts&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;public class NotificationSender implements INotificationSender {
 // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is more, you may declare not only public classes, interfaces or fucntions, but create a private functinality within module. It is very helpful when you don’t want to expose the whole functionality to another developer, just a some part of it.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Let’s see a sample, which shows how does TypeScript modules work.&lt;/p&gt;

&lt;p&gt;To start with, we’ll have a following project structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post/ts-modules-project-structure.png&quot; alt=&quot;project architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;user.ts&lt;/em&gt; file contains a special module:&lt;/p&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;models/user.ts&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;/// &amp;lt;reference path=&#39;../_all.ts&#39; /&amp;gt;

module manager {
    &#39;use strict&#39;;
    
    export class User {
        constructor(public Name: string, public Age: number){}
        getInfo = () =&amp;gt; {
            return `Name: ${this.Name}, age: ${this.Age}`;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you see, we expose class User outside in order to use it in another file. The line &lt;em&gt;reference&lt;/em&gt; means that we declare a new scope visibility.&lt;/p&gt;

&lt;p&gt;It is very similar to &lt;em&gt;#include “stdio.h”;&lt;/em&gt; (&lt;strong&gt;c++&lt;/strong&gt;) or &lt;em&gt;using System;&lt;/em&gt; (&lt;strong&gt;c#&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;The next file:&lt;/p&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;main.ts&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;/// &amp;lt;reference path=&#39;_all.ts&#39; /&amp;gt;

module manager {
    &#39;use strict&#39;;
    
    var u1 = new User(&quot;Bob&quot;, 20);
    console.log( u1, u1.getInfo() );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you were careful and paid attention to the &lt;em&gt;reference&lt;/em&gt; title, it has the same name - it is a special trick to manage the project reference list in one file:&lt;/p&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;_all.ts&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;/// &amp;lt;reference path=&#39;models/user.ts&#39; /&amp;gt;
/// &amp;lt;reference path=&#39;main.ts&#39; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is not the only one correct methodology, no. But in cases, when you use not a big project with simple structure - it is good way to manage your references, modules and support code.&lt;/p&gt;

&lt;h3 id=&quot;compile-sources&quot;&gt;Compile sources&lt;/h3&gt;

&lt;p&gt;And to get a final result we have to compile our *.ts files into *.js files. According to main advices on official TypeScript site, the simpliest way to do this - is using of &lt;strong&gt;tsc&lt;/strong&gt; compiler.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install &lt;em&gt;node.js&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Open terminal -&amp;gt; &lt;strong&gt;npm i typescript -g&lt;/strong&gt; (install typescript globally on your PC).&lt;/li&gt;
  &lt;li&gt;To use TS compiler use command &lt;strong&gt;tsc&lt;/strong&gt; in terminal with an appropriate flags.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In our case we use the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tsc --out app1/output.js app1/_all.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;grouping-references&quot;&gt;Grouping references&lt;/h3&gt;

&lt;p&gt;So, we discussed about working with one reference in your project. If you want to use a lot of modules, classes, interfaces and properly separate them from each other, just use another trick - reference grouping.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The main idea is categorize all existing references by suitable types and then include them into a special reference file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the beginning, let’s image we develop a specific &lt;em&gt;Dispatcher&lt;/em&gt; module to work with user’s notification in our application.&lt;/p&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;Project structure&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/post/ts-modules-project-structure2.png&quot; alt=&quot;project architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s just sample directories and files when the main purpose was to show you how you can manage references inside your TypeScript project.&lt;/p&gt;

&lt;p&gt;To see, how it works, compile project (see the point above) and then open an index.html file, thereafter press F12 in your browser (open developer console).&lt;/p&gt;

&lt;div align=&quot;right&quot; class=&quot;highlighter-file-title&quot;&gt;Chrome - console output&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/images/post/ts-modules-console-output.png&quot; alt=&quot;project architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/asduser/typescript-practice/tree/master/references-managing&quot;&gt;Download an example project from github.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/asduser/typescript-practice/tree/master/references-managing&quot; class=&quot;github-button&quot;&gt;Open repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jun 2016 15:00:00 +0300</pubDate>
        <link>http://asduser.github.io/typescript/references-managing</link>
        <guid isPermaLink="true">http://asduser.github.io/typescript/references-managing</guid>
        
        
        <category>typescript</category>
        
      </item>
    
      <item>
        <title>Typescript - classes inheritance</title>
        <description>&lt;p&gt;In this example we’re going to observe how does classes implement the inheritance behaviour in TypeScript language. It is similiar to C# inheritance where you can’t apply multiple inheritance to one class by default.&lt;/p&gt;

&lt;p&gt;On the other hand, you may implement a few interfaces’ behaviour in a specific class where you need.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;interface IPerson {
	Name: string;
	Age: number;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First of all, we’ve declared a common interface, which describes a behavior to the children classes. Now we have to create an abstract class and implement interface above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;abstract class Person implements IPerson {
	protected HumanType: HumanType;
	constructor(public Name: string, public Age: number){}
	info = () =&amp;gt; `My name is ${this.Name}, I am ${this.Age}. Human type is : ${this.HumanType ? &quot;Woman&quot; : &quot;Man&quot; }`;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the next stage we extend our common class and create a special entities which support instance creating:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;class Man extends Person {
	HumanType = HumanType.Man;
	constructor(Name: string, Age: number){
		super(Name, Age);				
	}			
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;class Woman extends Person {
	HumanType = HumanType.Woman;
	constructor(Name: string, Age: number){
		super(Name, Age);				
	}			
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add some enum-type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;enum HumanType {
	Man,
	Woman
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s all! Now we can check our classes behaviour in expressions below:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Create instance for each different class.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Man&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Woman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Maria&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Display results.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hope, this article will help you to understand the meaning of inheritance in TypeScript, thereafter you can deliver truly effective and scalable javascript code!&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Jun 2016 15:00:00 +0300</pubDate>
        <link>http://asduser.github.io/typescript/classes-inheritance-part1</link>
        <guid isPermaLink="true">http://asduser.github.io/typescript/classes-inheritance-part1</guid>
        
        
        <category>typescript</category>
        
      </item>
    
      <item>
        <title>Bitwise operations</title>
        <description>&lt;p&gt;In this article we’re going to talk about bitwise operations in programming. It’s a very powerful thing, which allows you significantly increase a performance in multiplying, addition and dividing numbers.&lt;/p&gt;

&lt;div align=&quot;right&quot; style=&quot;font-style:italic;font-size:13px;&quot;&gt; Languages: JavaScript, C#.&lt;/div&gt;

&lt;p&gt;So, let’s start! Assume, we have a number 93.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Number: 93.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Step 0&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;93 in binary system is 1011101.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JS:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1011101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; 93.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1011101&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; 93.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Due to using operator “»” in expression 93 » 1, we tell compiler to do a bit shift for 1 symbol, thus or number 93 will be transformed into 46.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JS:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101110&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;93&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; true.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;C#:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;93&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;101110&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; true.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Clarification&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1011101 -&amp;gt; 93. &lt;br /&gt;&lt;br /&gt;
101110 -&amp;gt; 46.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;p&gt;All existing numbers have to be shifted into right side for 1 sign. &lt;br /&gt;
So, it means that 1st number will be on the second place, 2nd on the 3rd etc, but the last number leaves collection. &lt;br /&gt;
As you see we had a last number “1”, but it have to be removed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;93 » 2 == 46 » 1&lt;/em&gt; -&amp;gt; 23.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;93 » 3 == 46 » 2 == 23 » 1&lt;/em&gt; -&amp;gt; 11.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;93 » 4 == 46 » 3 == 23 » 2 == 11 » 1&lt;/em&gt; -&amp;gt; 5.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;93 » 5 == 46 » 4 == 23 » 3 == 11 » 2 == 5 » 1&lt;/em&gt; -&amp;gt; 2.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;93 » 6 == 46 » 5 == 23 » 4 == 11 » 3 == 5 » 2 == 2 » 1&lt;/em&gt; -&amp;gt; 1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Step 7&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;93 » 7 == 46 » 6 == 23 » 5 == 11 » 4 == 5 » 3 == 2 » 2 == 1 » 1&lt;/em&gt; -&amp;gt; 0.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, we had a 7 iterations, thereafter the last received sign is zero. All next bit shift operation can’t change that and we’ll have a sign 0 all the time.&lt;/p&gt;

&lt;h3 id=&quot;shift-to-left&quot;&gt;Shift to left.&lt;/h3&gt;

&lt;p&gt;It is completely opposite to previous method. Compiler will add a 1 sign into the start, which increases the number.&lt;/p&gt;

&lt;p&gt;Number: 1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 0&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;How we did that? First of all, you have to understand the principle of representation the numbers in binary system. See a table below:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Metric system&lt;/th&gt;
      &lt;th&gt;Binary system&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;101&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;110&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;etc .&lt;/p&gt;

&lt;p&gt;So, when we use operator &lt;em&gt;«&lt;/em&gt; and apply it for number 1, the result will be 2 because we have a bits shift to left.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;1 « 1&lt;/em&gt; -&amp;gt; &lt;b style=&quot;color:green;&quot;&gt;2&lt;/b&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;2 « 1&lt;/em&gt; -&amp;gt; 4.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Step 3 (a consistent shift)&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;1 « 1 « 1&lt;/em&gt; -&amp;gt; 4.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s check that in C# compiler:&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// get a binary system representation
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// convert number into metric system
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// compare results
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;bitwise-and-&quot;&gt;Bitwise AND (&amp;amp;).&lt;/h3&gt;

&lt;p&gt;Now let’s talk about common expression task - bitwise and. According to code above, there is no a new principles, just only another representational behaviour.&lt;/p&gt;

&lt;p&gt;Supposably, we want to use and operator to numbers 5 and 7. So, here is a bits transformation:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Metric system&lt;/th&gt;
      &lt;th&gt;Position 3&lt;/th&gt;
      &lt;th&gt;Position 2&lt;/th&gt;
      &lt;th&gt;Position 1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Let’s change numbers and now we’re having 9 and 5:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Metric system&lt;/th&gt;
      &lt;th&gt;Position 4&lt;/th&gt;
      &lt;th&gt;Position 3&lt;/th&gt;
      &lt;th&gt;Position 2&lt;/th&gt;
      &lt;th&gt;Position 1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Check it using JavaScript:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; 5&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;bitwise-or-&quot;&gt;Bitwise OR (|).&lt;/h3&gt;

&lt;p&gt;In this case all combinations return 1 except 0 &amp;amp; 0. Example:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Position 1&lt;/th&gt;
      &lt;th&gt;Position 2&lt;/th&gt;
      &lt;th&gt;Result&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Supposably, we use OR operator with numbers 7 and 5, so compiler does the following actions:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Metric system&lt;/th&gt;
      &lt;th&gt;Position 3&lt;/th&gt;
      &lt;th&gt;Position 2&lt;/th&gt;
      &lt;th&gt;Position 1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;bitwise-exclusive-or-&quot;&gt;Bitwise Exclusive OR (^).&lt;/h3&gt;

&lt;p&gt;Only different signs return “1”, so there are [0 - 1], [1 - 0] combinations, in other cases will returned “0”.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Metric system&lt;/th&gt;
      &lt;th&gt;Position 3&lt;/th&gt;
      &lt;th&gt;Position 2&lt;/th&gt;
      &lt;th&gt;Position 1&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;bitwise-not-&quot;&gt;Bitwise Not (~).&lt;/h3&gt;

&lt;p&gt;Replaces each sign to opposite, [0 - 1], [1 - 0].&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Sign&lt;/th&gt;
      &lt;th&gt;Result&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;bitwise-shift-left-&quot;&gt;Bitwise Shift Left («).&lt;/h3&gt;

&lt;p&gt;This operation is almost equals to the multiplication an existing number by 2. In other words, if we have a number 24 and we have to change it using left shift for 2 signs, will be enough use 2 times multiplication it by 2.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;24 « 2&lt;/em&gt; -&amp;gt; 96.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion.&lt;/h3&gt;

&lt;p&gt;We have discussed about bitwise shift in programming languages. It happens when you work with computer memory, use high-load performance application or integrate your scenarios into the low-level programming.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To be continued…&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Jun 2016 15:00:00 +0300</pubDate>
        <link>http://asduser.github.io/archivers/bitwise-operations</link>
        <guid isPermaLink="true">http://asduser.github.io/archivers/bitwise-operations</guid>
        
        
        <category>code</category>
        
      </item>
    
  </channel>
</rss>
